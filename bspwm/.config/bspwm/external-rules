#!/usr/bin/env bash

# array that stores all window classes that are supposed to be floating windows
FLOATING_WINDOWS=(pqiv nitrogen lxappearance)

# arrays to store applications that are assigned to each workspace
WKSP_1_WINDOWS=()
WKSP_2_WINDOWS=(qutebrowser firefox chromium-browser librewolf)
WKSP_3_WINDOWS=(neovim gnvim)
WKSP_4_WINDOWS=(thunar nemo gparted gnome-disks)
WKSP_5_WINDOWS=(mpv)
WKSP_6_WINDOWS=(libreoffice libreoffice-startcenter zathura)
WKSP_7_WINDOWS=(gimp pinta inkscape)
WKSP_8_WINDOWS=(telegramdesktop uget-gtk)
WKSP_9_WINDOWS=(systemmonitor)
WKSP_10_WINDOWS=(meld)

# arrays to store applications that need to be 'followed' i.e. change focus to them as they launch (only includes applications not already in workspace arrays since those are auto-followed)
FOLLOW_WINDOWS=()

# first, let's change the positional arguments into labels we can understand
WINDOW_ID="$1"
WINDOW_CLASS="$2"
WINDOW_INSTANCE="$3"
WINDOW_CONSEQ="$4"

# next, keep a string for the rules that will be generated
RULES=""

# now, get more details about monitors and workspace numbers
mapfile -t ALL_MONITORS < <(bspc query -M --names)
FOCUSED_MONITOR="$(bspc query -M -m focused --names)"
WKSP_COUNT="$(bspc query -D --names | wc -l)"
WKSP_PER_MONITOR="$((WKSP_COUNT / ${#ALL_MONITORS[@]}))"
FOCUSED_MONITOR_NUM=""
for IDX in "${!ALL_MONITORS[@]}"; do
    if [[ ${ALL_MONITORS[$IDX]} == "${FOCUSED_MONITOR}" ]]; then
        FOCUSED_MONITOR_NUM="$IDX"
    fi
done

# decide where to put them based on the array that the class name belongs to
for WKSP_IDX in $(seq 1 $WKSP_PER_MONITOR); do
    WKSP="WKSP_${WKSP_IDX}_WINDOWS[@]"
    if [[ " ${!WKSP} " =~ " ${WINDOW_CLASS,,} " ]]; then
        RULES="$RULES desktop=^$((FOCUSED_MONITOR_NUM * WKSP_PER_MONITOR + WKSP_IDX)) follow=on"
    fi
done

# if a window class is mentioned in the array that contains windows that should have follow behavior, add that to the rules string
if [[ " ${FOLLOW_WINDOWS[@]} " =~ " ${WINDOW_CLASS,,} " ]]; then
    RULES="$RULES follow=on"
fi

# if a window class is mentioned in the array that contains windows that should be floating, add that to the rules string
if [[ " ${FLOATING_WINDOWS[@]} " =~ " ${WINDOW_CLASS,,} " ]]; then
    RULES="$RULES state=floating center=on"
fi

# clear all rules and set window to float + follow + center if they are dialogs
WINDOW_TYPE="$(xprop -id "$1" -notype -f _NET_WM_WINDOW_TYPE 32a '=$0\n' _NET_WM_WINDOW_TYPE | cut -f 2 -d '=')"
if [[ $WINDOW_TYPE == "_NET_WM_WINDOW_TYPE_DIALOG" ]]; then
    RULES="state=floating center=on follow=on"
fi

# finally, output the rules that we generated
echo "$RULES"
