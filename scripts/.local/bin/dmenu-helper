#!/usr/bin/env bash

usage() {
    echo "$(basename "$0") : menu helper script"
    echo " Possible operations: "
    echo "  run_menu    : Runs the menu with the custom style and a supplied prompt message."
    echo "  get_options : Gets command-line options that are passed to the menu."
    echo "  custom_menu : Runs the menu with additional options apart from the custom style and prompt message."
}

get_preferred_menu() {
    xrdb -query | tr -d '\t' | grep 'menu.backend' | cut -f -2 -d ':'
}

# function to generate options to pass to dmenu
get_options() {
    # get the focused display name
    FOCUS_MON="$(display-helper get_focused_display)"
    # get the dimensions from the polybar helper script so that they remain consistent
    mapfile -t DIMENSIONS < <(polybar-helper get_dimensions "$FOCUS_MON")
    # use the font from polybar to have consistency
    FONT="$(polybar-helper get_font "$FOCUS_MON" | head -1 | sed 's/pixelsize=/size=/g' | cut -f 1 -d ";")"
    # putting it all together
    echo "-X ${DIMENSIONS[0]} -Y ${DIMENSIONS[1]} -l ${DIMENSIONS[2]} -W ${DIMENSIONS[3]} -fn ${FONT}"
}

# function to disable bars before running dmenu and enabling them after exit
polybar_control() {
    polybar-helper disable > /dev/null 2>&1
    trap "polybar-helper enable >/dev/null 2>&1" EXIT
}

# function to present the menu based on the input
menu() {
    # check if there's an argument to the command
    if [ "$3" != "" ]; then
        LINES="$3"
    # if not, then check if there's anything from stdin
    elif [ -p /dev/stdin ]; then
        LINES="$(cat)"
    fi
    echo -e "$LINES" | dmenu $1 -p "$2" | tail -1
}

case $1 in
    run_menu)
        polybar_control
        menu "$(get_options)" "$2" "$3"
        exit 0
        ;;
    get_options)
        get_options
        exit 0
        ;;
    custom_menu)
        polybar_control
        menu "$(get_options) $2" "$3" "$4"
        exit 0
        ;;
    *)
        echo "Unknown operation: $1"
        usage
        exit 1
        ;;
esac
