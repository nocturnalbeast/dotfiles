#!/usr/bin/env sh

# A MPRIS-based media playback contoller script with player prioritization.

# Global configuration
PRIORITY="mopidy DeaDBeeF mpv"
TRACK_CHG_EXCLUDE="mpv"
VOL_CHG_EXCLUDE=""
POS_CHG_EXCLUDE=""

usage() {
    cat << EOF
Usage: $(basename "$0") OPERATION [ARGUMENT]

A MPRIS-based media playback script.

Operations:
    list            List available players ordered by priority
    play            Play media on the highest priority available player
    stop            Stop currently playing player(s)
    stopall         Stop all available players
    pause           Pause currently playing player(s)
    pauseall        Pause all available players
    toggle          Toggle play/pause on prioritized player
    next            Skip to next track on playing player(s)
    prev            Skip to previous track on playing player(s)
    info            Show current playback information
                    If ARGUMENT is provided, use it for metadata formatting
    continuousinfo  Follow playback information with live updates
                    If ARGUMENT is provided, use it for metadata formatting
    volume          Change volume by ARGUMENT (e.g. +5, -10, 70)
    seek            Seek by ARGUMENT (e.g. +10, -30)
                    Format: [+-]TIME where TIME is in seconds
EOF
}

# Returns list of currently playing instances.
#
# Outputs:
#   Writes list of playing instances to stdout.
get_playing_instances() {
    playerctl -a metadata -f "{{playerInstance}} {{status}}" 2> /dev/null |
        grep " Playing$" |
        cut -f1 -d " "
}

# Returns a list of player instances ordered by priority.
#
# Arguments:
#   $1 - Filter type: "all" for all instances, "playing" for only playing instances
#
# Outputs:
#   Writes ordered list of player instances to stdout.
get_priority() {
    FILTER_TYPE="${1:-all}"
    CURRENT_INSTANCES=$(playerctl -l 2> /dev/null)
    [ -z "$CURRENT_INSTANCES" ] && return 1

    # If only playing instances needed, return them ordered by priority
    if [ "$FILTER_TYPE" = "playing" ]; then
        RESULT=""
        PLAYING_INSTANCES=$(get_playing_instances)
        # First add playing instances that are in priority list
        for player in $PRIORITY; do
            for instance in $PLAYING_INSTANCES; do
                [ "$player" = "$instance" ] && RESULT="$RESULT|$instance"
            done
        done
        # Then add any playing instances not in priority list
        for instance in $PLAYING_INSTANCES; do
            case " $PRIORITY " in
                *" $instance "*) continue ;;
            esac
            RESULT="$RESULT|$instance"
        done
        printf "%s\n" "$RESULT" | tr -s '|' '\n' | sed '/^$/d'
        return
    fi

    # Start with prioritized instances
    RESULT=""
    for player in $PRIORITY; do
        for instance in $CURRENT_INSTANCES; do
            [ "$player" = "$instance" ] && RESULT="$RESULT|$instance"
        done
    done

    # Add remaining instances that are not in priority list
    for instance in $CURRENT_INSTANCES; do
        case " $PRIORITY " in
            *" $instance "*) continue ;;
        esac
        RESULT="$RESULT|$instance"
    done

    # Move playing instances to the front, maintaining their priority order
    PLAYING_RESULT=""
    PLAYING_INSTANCES=$(get_playing_instances)
    # First add playing instances that are in priority list
    for player in $PRIORITY; do
        for instance in $PLAYING_INSTANCES; do
            [ "$player" = "$instance" ] && PLAYING_RESULT="$PLAYING_RESULT|$instance"
        done
    done
    # Then add any playing instances not in priority list
    for instance in $PLAYING_INSTANCES; do
        case " $PRIORITY " in
            *" $instance "*) continue ;;
        esac
        PLAYING_RESULT="$PLAYING_RESULT|$instance"
    done

    # Remove playing instances from main result and combine
    for instance in $PLAYING_INSTANCES; do
        RESULT=$(printf "%s\n" "$RESULT" | tr -s '|' '\n' | grep -v "^${instance}$" | tr '\n' '|')
    done
    RESULT="$PLAYING_RESULT|$RESULT"

    # Output the final list
    printf "%s\n" "$RESULT" | tr -s '|' '\n' | sed '/^$/d'
}

# Controls playback state on specified players.
#
# Arguments:
#   $1 - Operation to perform (play, stop, pause)
#   $2 - "all" to affect all players, otherwise affects specific players based on operation
control_playback() {
    OPERATION="$1"
    ALL_FLAG="$2"

    # For play operation, try each player in priority order
    if [ "$OPERATION" = "play" ]; then
        get_priority | while read -r instance; do
            if playerctl -p "$instance" play 2> /dev/null; then
                return 0
            fi
        done
        return 1
    fi

    # For stop/pause operations
    if [ "$ALL_FLAG" = "all" ]; then
        if playerctl -a "$OPERATION" 2> /dev/null; then
            return 0
        fi
    else
        get_priority "playing" | while read -r instance; do
            if playerctl -p "$instance" "$OPERATION" 2> /dev/null; then
                return 0
            fi
        done
    fi
    return 1
}

# Changes track on specified players.
#
# Arguments:
#   $1 - Direction to change track ("next" or "previous")
change_track() {
    get_priority "playing" | while read -r instance; do
        case " $TRACK_CHG_EXCLUDE " in
            *" $instance "*) continue ;;
        esac
        if playerctl -p "$instance" "$1" 2> /dev/null; then
            return 0
        fi
    done
    return 1
}

# Changes volume on players by priority.
#
# Arguments:
#   $1 - Volume change (e.g. +5, -10, 70)
change_volume() {
    # Get numeric value and convert to decimal
    case "$1" in
        +*) NUM="${1#+}"; SUFFIX="+";;
        -*) NUM="${1#-}"; SUFFIX="-";;
        *) NUM="$1"; SUFFIX="";;
    esac
    ARG="$(printf "%.2f" "$(echo "scale=2; $NUM/100" | bc)")$SUFFIX"

    get_priority | while read -r instance; do
        case " $VOL_CHG_EXCLUDE " in
            *" $instance "*) continue ;;
        esac
        if playerctl -p "$instance" volume "$ARG" 2> /dev/null; then
            return 0
        fi
    done
    return 1
}

# Seeks in media by priority.
#
# Arguments:
#   $1 - Position change in seconds (e.g. +10, -30)
seek_position() {
    # Convert +N to N+ and -N to N- for playerctl
    case "$1" in
        +*) ARG="${1#+}+" ;;
        -*) ARG="${1#-}-" ;;
        *) ARG="$1" ;;
    esac

    get_priority | while read -r instance; do
        case " $POS_CHG_EXCLUDE " in
            *" $instance "*) continue ;;
        esac
        if playerctl -p "$instance" position "$ARG" 2> /dev/null; then
            return 0
        fi
    done
    return 1
}

# Gets current playback information from preferred player.
#
# Arguments:
#   $1 - Optional format string for metadata
#   $2 - Optional "follow" flag for continuous updates
#
# Outputs:
#   Writes playback information to stdout.
get_info() {
    FORMAT_STRING="$1"
    FOLLOW_MODE="$2"

    PREFERRED_PLAYER=$(get_priority | head -n1)
    [ -z "$PREFERRED_PLAYER" ] && {
        printf "No players available\n"
        return 1
    }

    if [ -z "$FORMAT_STRING" ]; then
        FORMAT_STRING='Player: {{playerInstance}}
Status: {{status}}
Title: {{title}}
Artist: {{artist}}
Album: {{album}}'
    fi

    if [ "$FOLLOW_MODE" = "follow" ]; then
        playerctl -p "$PREFERRED_PLAYER" -F metadata -f "$FORMAT_STRING" 2> /dev/null
    else
        playerctl -p "$PREFERRED_PLAYER" metadata -f "$FORMAT_STRING" 2> /dev/null
    fi
}

# Toggles playback state on prioritized player.
#
# Outputs:
#   Returns 0 on success, 1 on failure.
toggle_playback() {
    PREFERRED_PLAYER=$(get_priority | head -n1)
    [ -z "$PREFERRED_PLAYER" ] && return 1

    if playerctl -p "$PREFERRED_PLAYER" play-pause 2> /dev/null; then
        return 0
    fi
    return 1
}

# Main entry point that processes command-line arguments.
#
# Arguments:
#   $1 - Operation to perform
#   $2 - Optional argument for operations that need it
main() {
    case $1 in
        list)
            get_priority
            ;;
        play)
            control_playback "play"
            ;;
        stop)
            control_playback "stop"
            ;;
        stopall)
            control_playback "stop" "all"
            ;;
        pause)
            control_playback "pause"
            ;;
        pauseall)
            control_playback "pause" "all"
            ;;
        toggle)
            toggle_playback
            ;;
        next)
            change_track "next"
            ;;
        prev)
            change_track "previous"
            ;;
        info)
            get_info "$2"
            ;;
        continuousinfo)
            get_info "$2" "follow"
            ;;
        volume)
            [ -z "$2" ] && {
                printf "Error: Volume change required\n" >&2
                exit 1
            }
            change_volume "$2"
            ;;
        seek)
            [ -z "$2" ] && {
                printf "Error: Seek position required\n" >&2
                exit 1
            }
            seek_position "$2"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
}

main "$@"
