#!/usr/bin/env bash

# Source: ncmpcpp-ueberzug from https://github.com/alnj/ncmpcpp-ueberzug
# removed image retrieval, which is then offloaded to kunst-mod

# SETTINGS
image_path="/tmp/current_albumart.jpg"
padding_top=0
padding_bottom=2
padding_right=0
max_width=30
reserved_playlist_cols=30
reserved_cols_in_percent="false"
force_square="true"
square_alignment="center"
left_aligned="true"
padding_left=1

# just a placeholder image encoded in base64, nothing to see here
read -r -d '' music_note << EOF
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ITEgQVFhkfBxgaEwsdHB4fH/2gAIAQEAAT8QPCPZeXwgcENvCzyd3Ds8QGbYj/AYUQww8bbMy8IPI8jbEuTvu67uBKGGG222WWWZcFwe03dwZl4GXB8FKUoZQww222yyyy4KXI8im2IlOUoZShhhhhtttllllLKXBzyKVsRyKUpQwwwww222yyyyylPeXhBltjwgpQyhhhhtttttllllllmeRcHg4LgoZSiGGGGG3hsstq7h273f5SEmGms6vndCj5SzKZcim3gZSlKGGGGGG2221utzBMH5XpZQeq3f4fN5GyP5Bh/WyiL/APMBdOXShfMzLLLKUpTbDEpSlDDDDDDbOyTyx/tnLvLPf6j4GIVnZH9Og+L2mgiPx2HxeWeXgUf3P+5ZZllKUy8DDKUoYYYYYYZH4NjQMYp07vafoXdvzPifd5mCd1TsfnhQvmZZZZSlKWW2GGGUpShhhhh8CV6GvQhoZ89n8rD+2237j/wHy2eD9yfjh87HRmZy7eRxYXzMsssspSlLbwMpSlDDDDDDw1ExqY7War7yw157X+r+T3mOPU/fQ/RGAAB2HQP1bbP6vpx4XzMssspSlKbYYZSlKGGGGGHiqs+h0W2222y+z6cOF8zLLLKUpSlthhhlKUMMMMMM9kfqPRbbbbbP6PpwIXzMsssspSlltthlKUoYYYYYZbA/Wei22222X1fTicvmZZZZSlKWW3ghlKGGGGGGHiD9Z6LbbbbZ/d9L7n0y+ZllllKUpeNtiGUMoYYYYYZb9TpXn0ui23h7CWQ+Wfhb/wDe3BR0R5el9z6ZfMyyyyylKWXkiUoYYYYYYb6T0rz7XRwJsLVMA9VtCZ3C38nl7v0S1N8z/t0P1Yeh8RgBGBZp6PrfY+mXzMssspSlm3khiGGGGGGHext1O4/E9+h0rz7XRbOHQC9XX8Hm/rw/W+mfzMsssspZZ8IwwwwwycML4A81sHw6dk+//q/E1DPmi/WC91Ef9MiB16K6zevd7He6frdEtB6uSYq118gQHwHh80gPsLX8J0r69ZZZZSlnw7wMMMQiYToy6D3XqD2P34Vn1umEdScSL8gjen4dPChilsd70H2Dp+304MYxiy28aW2222wwwze4xfRAP9u3Tw9Iu8PdT/5bYCdr3d7ep6k8eQV1z3fU/s9GPJ/4xoVeWF+8R+Bb1teydU9g/cftQDAHYC2WWWWXjed52IYYYNtYTzQB/PF1vebvhgf11/dtvvb72vV8228GMYststvg222222GMRb9nt08z+fp8XQaIqX9tPU+Yw0fN8Py9j5ts+egPJfZz0On5/wAIAzWYzbbbbbbbbbeBNt5PbhQD+3u0w1/1IAADyOh/kAB+UzbbbbbbbW2223/EAPy8A/LxA3wDbfe222222223htttvhDbfANttt4bbw22222222222222222222222222222222220tttttt422222222222222222223jbeN43jbbeN43jbbfFttvG8bxttttvJ4i8/8zP8Ag//Z
EOF

# Only set this if the geometries are wrong or ncmpcpp shouts at you to do it.
# Visually select/highlight a character on your terminal, zoom in an image 
# editor and count how many pixels a character's width and height are.
font_height=
font_width=

main() {
    kill_previous_instances >/dev/null 2>&1
    get_cover_image         >/dev/null
    display_cover_image     2>/dev/null
    detect_window_resizes   >/dev/null 2>&1
}

# ==== Main functions =========================================================

kill_previous_instances() {
    script_name=$(basename "$0")
    for pid in $(pidof -x "$script_name"); do
        if [ "$pid" != $$ ]; then
            kill -15 "$pid"
        fi 
    done
}

get_cover_image() {
    trackuri="$( mpc --format "%file%" current )"
    trackname="$( mpc --format "%title%" current )"
    trackartist="$( mpc --format "%artist%" current )"
    trackalbum="$( mpc --format "%album%" current )"
    cached_image_path="$( get-coverart -u "$trackuri" -n "$trackname" -a "$trackartist" -g "$trackalbum" 2>/dev/null )"
    if [ "$cached_image_path" != "" ]; then
        cp "$cached_image_path" "$image_path"
    else
        echo "$music_note" | base64 --decode > "$image_path"
    fi
    # show notification here too
    if [ "$( polybar-helper get_state )" == "yes" ]; then
        if [ "$trackname" != "" ]; then
            if [ "$trackalbum" = "$trackname" ]; then
                notify-send -u low "Playing $trackname" "by <b>$trackartist</b>" -i "$image_path"
            else
                notify-send -u low "Playing $trackname" "from <i>$trackalbum</i> by <b>$trackartist</b>" -i "$image_path"
            fi
        else
            notify-send -u low "Playing $trackuri" -i "$image_path"
        fi
    fi
}

display_cover_image() {
    compute_geometry

    send_to_ueberzug \
        action "add" \
        identifier "mpd_cover" \
        path "$image_path" \
        x "$ueber_left" \
        y "$padding_top" \
        height "$ueber_height" \
        width "$ueber_width" \
        synchronously_draw "True" \
        scaler "forced_cover" \
        scaling_position_x "0.5"
}

detect_window_resizes() {
    {
        trap 'display_cover_image' WINCH
        while :; do sleep .1; done
    } &
}


# ==== Helper functions =========================================================

compute_geometry() {
    unset LINES COLUMNS # Required in order for tput to work in a script
    term_lines=$(tput lines)
    term_cols=$(tput cols)
    if [ -z "$font_height" ] || [ -z "$font_height" ]; then
        guess_font_size
    fi

    ueber_height=$(( term_lines - padding_top - padding_bottom ))
    # Because Ueberzug uses characters as a unit we must multiply
    # the line count (height) by the font size ratio in order to
    # obtain an equivalent width in column count
    ueber_width=$(( ueber_height * font_height / font_width ))
    ueber_left=$(( term_cols - ueber_width - padding_right ))

    if [ "$left_aligned" = "true" ]; then
        compute_geometry_left_aligned
    else
        compute_geometry_right_aligned
    fi

    apply_force_square_setting
}

compute_geometry_left_aligned() {
    ueber_left=$padding_left
    max_width_chars=$(( term_cols * max_width / 100 ))
    if [ "$max_width" != 0 ] &&
        [ $(( ueber_width + padding_right + padding_left )) -gt "$max_width_chars" ]; then
        ueber_width=$(( max_width_chars - padding_left - padding_right ))
    fi
}

compute_geometry_right_aligned() {
    if [ "$reserved_cols_in_percent" = "true" ]; then
        ueber_left_percent=$(printf "%.0f\n" $(calc "$ueber_left" / "$term_cols" '*' 100))
        if [ "$ueber_left_percent" -lt "$reserved_playlist_cols" ]; then
            ueber_left=$(( term_cols * reserved_playlist_cols / 100  ))
            ueber_width=$(( term_cols - ueber_left - padding_right ))
        fi
    else
        if [ "$ueber_left" -lt "$reserved_playlist_cols" ]; then
            ueber_left=$reserved_playlist_cols
            ueber_width=$(( term_cols - ueber_left - padding_right ))
        fi

    fi

    if [ "$max_width" != 0 ] && [ "$ueber_width" -gt "$max_width" ]; then
        ueber_width=$max_width
        ueber_left=$(( term_cols - ueber_width - padding_right ))
    fi
}

apply_force_square_setting() {
    if [ $force_square = "true" ]; then
        ueber_height=$(( ueber_width * font_width / font_height ))
        case "$square_alignment" in
            center)
                area=$(( term_lines - padding_top - padding_bottom ))
                padding_top=$(( padding_top + area / 2 - ueber_height / 2  ))
                ;;
            bottom)
                padding_top=$(( term_lines - padding_bottom - ueber_height ))
                ;;
            *) ;;
        esac
    fi
}

guess_font_size() {
    # A font width and height estimate is required to
    # properly compute the cover width (in columns).
    # We are reproducing the arithmetic used by Ueberzug
    # to guess font size.
    # https://github.com/seebye/ueberzug/blob/master/ueberzug/terminal.py#L24

    guess_terminal_pixelsize

    approx_font_width=$(( term_width / term_cols ))
    approx_font_height=$(( term_height / term_lines ))

    term_xpadding=$(( ( - approx_font_width * term_cols + term_width ) / 2 ))
    term_ypadding=$(( ( - approx_font_height * term_lines + term_height ) / 2 ))

    font_width=$(( (term_width - 2 * term_xpadding) / term_cols ))
    font_height=$(( (term_height - 2 * term_ypadding) / term_lines ))
}

guess_terminal_pixelsize() {
    # We are re-using the same Python snippet that
    # Ueberzug utilizes to retrieve terminal window size.
    # https://github.com/seebye/ueberzug/blob/master/ueberzug/terminal.py#L10

    python <<END
import sys, struct, fcntl, termios

def get_geometry():
    fd_pty = sys.stdout.fileno()
    farg = struct.pack("HHHH", 0, 0, 0, 0)
    fretint = fcntl.ioctl(fd_pty, termios.TIOCGWINSZ, farg)
    rows, cols, xpixels, ypixels = struct.unpack("HHHH", fretint)
    return "{} {}".format(xpixels, ypixels)

output = get_geometry()
f = open("/tmp/ncmpcpp_geometry.txt", "w")
f.write(output)
f.close()
END

    # ioctl doesn't work inside $() for some reason so we
    # must use a temporary file
    term_width=$(awk '{print $1}' /tmp/ncmpcpp_geometry.txt)
    term_height=$(awk '{print $2}' /tmp/ncmpcpp_geometry.txt)
    rm "/tmp/ncmpcpp_geometry.txt"

    if ! is_font_size_successfully_computed; then
        echo "Failed to guess font size, try setting it in ncmpcpp_cover_art settings"
    fi
}

is_font_size_successfully_computed() {
    [ -n "$term_height" ] && [ -n "$term_width" ] &&
        [ "$term_height" != "0" ] && [ "$term_width" != "0" ]
}


calc() {
    awk "BEGIN{print $*}"
}

send_to_ueberzug() {
    old_IFS="$IFS"

    # Ueberzug's "simple parser" uses tab-separated
    # keys and values so we separate words with tabs
    # and send the result to the wrapper's FIFO
    IFS="$(printf "\t")"
    echo "$*" > "$FIFO_UEBERZUG"

    IFS=${old_IFS}
}


main
