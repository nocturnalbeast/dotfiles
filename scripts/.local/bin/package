#!/usr/bin/env sh

# A distribution-agnostic wrapper for common package management operations.

usage() {
    cat << EOF
Usage: $(basename "$0") OPERATION [PACKAGE...]

A distro-agnostic package management helper script.

Operations:
  install, i    Install specified package(s).
  update,  u    Update all installed packages.
  search,  s    Search for a package in remote repositories.
  remove,  r    Remove specified package(s).
  clean,   c    Clean package cache and remove orphaned packages.
  desc,    d    Show detailed information about specified package(s).
  list,    l    List installed packages.
EOF
}

# Returns the appropriate privilege escalation command (sudo/doas) if needed.
#
# Arguments:
#   $1 - Operation being performed
#   $2 - Boolean indicating if privilege escalation is needed
#
# Outputs:
#   Writes the privilege escalation command to stdout if needed.
detect_sudo_binary() {
    OPERATION="$1"
    NEEDS_SU="$2"

    # These operations never need privilege escalation
    case $OPERATION in
        "search" | "list" | "desc")
            return
            ;;
    esac

    if [ "$(id -u)" != "0" ] && [ "$NEEDS_SU" = "true" ]; then
        if type doas > /dev/null 2>&1; then
            echo "doas"
        elif type sudo > /dev/null 2>&1; then
            echo "sudo"
        fi
    fi
}

# Returns the package manager command for the current operation and distribution.
#
# Arguments:
#   $1 - Operation to perform (install/update/search/remove/clean/desc)
#
# Outputs:
#   Writes the complete package manager command to stdout.
#   Writes error message to stderr on unsupported distribution.
get_package_manager_command() {
    OPERATION="$1"

    if [ -f "/etc/os-release" ]; then
        . /etc/os-release
    elif [ -f "/usr/lib/os-release" ]; then
        . /usr/lib/os-release
    fi

    if [ "$ID" = "" ] && [ "$ID_LIKE" = "" ]; then
        echo "Can't detect any operating system ID. Exiting now." >&2
        exit 1
    elif [ "$ID" = "" ]; then
        ID="$ID_LIKE"
    fi

    # Debian-based distro commands
    DEBIAN_INSTALL_CMD="apt-get install"
    DEBIAN_UPDATE_CMD="apt-get -y update
apt-get -y upgrade"
    DEBIAN_SEARCH_CMD="apt-cache search"
    DEBIAN_REMOVE_CMD="apt-get --purge remove"
    DEBIAN_CLEAN_CMD="apt-get -y autoclean
apt-get -y autoremove"
    DEBIAN_DESC_CMD="apt-cache show"
    DEBIAN_LIST_CMD="dpkg -l"

    # Red Hat-based distro commands (DNF)
    REDHAT_INSTALL_CMD="dnf install"
    REDHAT_UPDATE_CMD="dnf --assumeyes update"
    REDHAT_SEARCH_CMD="dnf search"
    REDHAT_REMOVE_CMD="dnf remove"
    REDHAT_CLEAN_CMD="dnf --assumeyes clean all
dnf --assumeyes autoremove"
    REDHAT_DESC_CMD="dnf info"
    REDHAT_LIST_CMD="dnf list installed"

    # SUSE-based distro commands
    SUSE_INSTALL_CMD="zypper install"
    SUSE_UPDATE_CMD="zypper --non-interactive update"
    SUSE_SEARCH_CMD="zypper search"
    SUSE_REMOVE_CMD="zypper remove"
    SUSE_CLEAN_CMD="zypper --non-interactive clean"
    SUSE_DESC_CMD="zypper info"
    SUSE_LIST_CMD="zypper packages --installed-only"

    # Arch-based distro commands
    ARCH_CMD="pacman"
    NEEDS_SU="true"
    if type paru > /dev/null 2>&1; then
        ARCH_CMD="paru"
        NEEDS_SU="false"
    elif type yay > /dev/null 2>&1; then
        ARCH_CMD="yay"
        NEEDS_SU="false"
    elif type pacaur > /dev/null 2>&1; then
        ARCH_CMD="pacaur"
        NEEDS_SU="false"
    fi
    ARCH_INSTALL_CMD="$ARCH_CMD -S --color auto"
    ARCH_UPDATE_CMD="$ARCH_CMD --noconfirm -Syu --color auto"
    ARCH_SEARCH_CMD="$ARCH_CMD -Ss --color auto"
    ARCH_REMOVE_CMD="$ARCH_CMD -Rsn --color auto"
    ARCH_CLEAN_CMD="$ARCH_CMD --noconfirm -Sc --color auto"
    ARCH_DESC_CMD="$ARCH_CMD -Q --info --color auto"
    ARCH_LIST_CMD="$ARCH_CMD -Q --color auto"

    # Void Linux commands
    VOID_INSTALL_CMD="xbps-install -S"
    VOID_UPDATE_CMD="xbps-install -y -Su"
    VOID_SEARCH_CMD="xbps-query -Rs"
    VOID_REMOVE_CMD="xbps-remove -R"
    VOID_CLEAN_CMD="xbps-remove -y -Oo"
    VOID_DESC_CMD="xbps-query -S"
    VOID_LIST_CMD="xbps-query -l"

    case $ID in
        "ubuntu" | "debian" | "raspbian" | "linuxmint")
            PKG_TYPE="DEBIAN"
            NEEDS_SU="true"
            ;;
        "fedora" | "rhel" | "centos" | "rocky" | "almalinux" | "nobara")
            PKG_TYPE="REDHAT"
            NEEDS_SU="true"
            ;;
        "opensuse-tumbleweed" | "opensuse-leap" | "opensuse" | "suse")
            PKG_TYPE="SUSE"
            NEEDS_SU="true"
            ;;
        "arch" | "archlinux" | "artix" | "artixlinux" | "endeavouros" | "cachyos" | "garuda" | "manjaro")
            PKG_TYPE="ARCH"
            ;;
        "void")
            PKG_TYPE="VOID"
            NEEDS_SU="true"
            ;;
        *)
            echo "Unsupported OS. Exiting now." >&2
            exit 1
            ;;
    esac

    if [ "$PKG_TYPE" != "" ]; then
        case $OPERATION in
            "install")
                CMD_VAR="${PKG_TYPE}_INSTALL_CMD"
                ;;
            "update")
                CMD_VAR="${PKG_TYPE}_UPDATE_CMD"
                ;;
            "search")
                CMD_VAR="${PKG_TYPE}_SEARCH_CMD"
                ;;
            "remove")
                CMD_VAR="${PKG_TYPE}_REMOVE_CMD"
                ;;
            "clean")
                CMD_VAR="${PKG_TYPE}_CLEAN_CMD"
                ;;
            "desc")
                CMD_VAR="${PKG_TYPE}_DESC_CMD"
                ;;
            "list")
                CMD_VAR="${PKG_TYPE}_LIST_CMD"
                ;;
        esac
        eval "CMD=\$$CMD_VAR"
        SU_CMD=$(detect_sudo_binary "$OPERATION" "$NEEDS_SU")
        if [ -n "$SU_CMD" ]; then
            echo "$CMD" | while IFS= read -r line; do
                echo "$SU_CMD $line"
            done
        else
            echo "$CMD"
        fi
    fi
}

# Main entry point that processes the command-line arguments.
#
# Arguments:
#   $1 - Operation to perform
#   $@ - Additional arguments for the operation
main() {
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi

    OPERATION="$1"
    shift

    case $OPERATION in
        "install" | "i")
            CMD=$(get_package_manager_command "install")
            echo "$CMD" | while IFS= read -r command; do
                $command $@
            done
            ;;
        "update" | "u")
            CMD=$(get_package_manager_command "update")
            echo "$CMD" | while IFS= read -r command; do
                $command
            done
            ;;
        "search" | "s")
            CMD=$(get_package_manager_command "search")
            echo "$CMD" | while IFS= read -r command; do
                $command $@
            done
            ;;
        "remove" | "r")
            CMD=$(get_package_manager_command "remove")
            echo "$CMD" | while IFS= read -r command; do
                $command $@
            done
            ;;
        "clean" | "c")
            CMD=$(get_package_manager_command "clean")
            echo "$CMD" | while IFS= read -r command; do
                $command
            done
            ;;
        "desc" | "d")
            CMD=$(get_package_manager_command "desc")
            echo "$CMD" | while IFS= read -r command; do
                $command $@
            done
            ;;
        "list" | "l")
            CMD=$(get_package_manager_command "list")
            echo "$CMD" | while IFS= read -r command; do
                $command
            done
            ;;
        "-h" | "--help")
            usage
            ;;
        *)
            usage
            exit 1
            ;;
    esac
}

main "$@"
