#!/usr/bin/env bash

# pm - acronym for package manager.
# use this script to run common package management operations, regardless of
# the base distribution.

usage() {
    echo "$(basename "$0") : distro-agnostic package management helper script"
    echo " Possible operations: "
    echo "  install/i      : Install a package/number of packages."
    echo "  update/u       : Update all installed packages."
    echo "  search/s       : Search if a package is available on the remote repositories."
    echo "  remove/r       : Remove an installed package."
    echo "  clean/c        : Clean cache/remnants/orphaned packages etc."
    echo "  desc/d         : Get more information about a package."
}

get_commands() {
    if [[ -f "/etc/os-release" ]]; then
        source /etc/os-release
    elif [[ -f "/usr/lib/os-release" ]]; then
        source /usr/lib/os-release
    fi

    if [[ "$ID" == "" ]] && [[ "$ID_LIKE" == "" ]]; then
        >&2 echo "Can't detect any operating system ID. Exiting now."
        exit
    elif [[ "$ID" == "" ]]; then
        ID="$ID_LIKE"
    fi

    SU_REQUIRED="true"
    case $ID in
        "ubuntu"|"debian"|"raspbian"|"linuxmint")
            INSTALL_CMD="apt-get install"
            UPDATE_CMD="apt-get update; apt-get upgrade"
            SEARCH_CMD="apt-cache search"
            REMOVE_CMD="apt-get --purge remove"
            CLEAN_CMD="apt-get autoremove; apt-get autoclean"
            DESC_CMD="apt-cache show"
            ;;
         "arch"|"archlinux"|"artix"|"artixlinux")
            AUR_WRAPPER="none"
            if type paru &> /dev/null; then
                AUR_WRAPPER="paru"
            elif type yay &> /dev/null; then
                AUR_WRAPPER="yay"
            elif type pacaur &> /dev/null; then
                AUR_WRAPPER="pacaur"
            fi
            if [[ "$AUR_WRAPPER" != "none" ]]; then
                INSTALL_CMD="$AUR_WRAPPER --color auto -S"
                UPDATE_CMD="$AUR_WRAPPER --color auto -Syu"
                SEARCH_CMD="$AUR_WRAPPER --color auto -Ss"
                REMOVE_CMD="$AUR_WRAPPER --color auto -Rsn"
                CLEAN_CMD="$AUR_WRAPPER --color auto -Sc"
                DESC_CMD="$AUR_WRAPPER --color auto -Q --info"
                SU_REQUIRED="false"
            else
                INSTALL_CMD="pacman --color auto -S"
                UPDATE_CMD="pacman --color auto -Syu"
                SEARCH_CMD="pacman --color auto -Ss"
                REMOVE_CMD="pacman --color auto -Rsn"
                CLEAN_CMD="pacman --color auto -Sc"
                DESC_CMD="pacman --color auto -Q --info"
            fi
            ;;
        "void")
            INSTALL_CMD="xbps-install -S"
            UPDATE_CMD="xbps-install -Su"
            SEARCH_CMD="xbps-query -Rs"
            REMOVE_CMD="xbps-remove -R"
            CLEAN_CMD="xbps-remove -Oo"
            DESC_CMD="xbps-query -S"
            ;;
        *)
            >&2 echo "Unsupported OS. Exiting now."
            ;;
    esac
}

get_su_command() {
    SU_CMD=""
    if [[ "$( id -u )" != "0" ]] && [[ "$SU_REQUIRED" == "true" ]]; then
        if type doas &> /dev/null; then
            SU_CMD="doas"
        elif type sudo &> /dev/null; then
            SU_CMD="sudo"
        fi
    fi
}

OPERATION="$1"
shift

case $OPERATION in
    "install"|"i")
        get_commands
        get_su_command
        $SU_CMD $INSTALL_CMD $@
        ;;
    "update"|"u")
        get_commands
        get_su_command
        $SU_CMD $UPDATE_CMD
        ;;
    "search"|"s")
        get_commands
        $SEARCH_CMD $@
        ;;
    "remove"|"r")
        get_commands
        get_su_command
        $SU_CMD $REMOVE_CMD $@
        ;;
    "clean"|"c")
        get_commands
        get_su_command
        $SU_CMD $CLEAN_CMD
        ;;
    "desc"|"d")
        get_commands
        $DESC_CMD $@
        ;;
    *)
        usage
        exit
        ;;
esac
