#!/usr/bin/env bash

BARONE="mainbar"
BARTWO="monbar"

# get the name of the window manager
export WINDOW_MANAGER="$( wmctrl -m | sed -n "s/^Name: \(.*\)/\1/p" )"

# terminate already running bar instances
killall -q polybar

# remove the state file from the previous instances
rm -f "$( polybar-helper get_cache_path )"

# wait until the processes have been shut down
while pgrep -u $UID -x polybar >/dev/null 2>&1; do sleep 1; done

# then launch bars
for M in $( polybar --list-monitors | cut -d: -f1 ); do
    FONTS="$( polybar-helper get_font "$M" )"
    TF="$( echo -e "$FONTS" | sed '1q;d' )"
    GF="$( echo -e "$FONTS" | sed '2q;d' )"
    MONITOR=$M TEXT_FONT=$TF GLYPH_FONT=$GF polybar $BARONE &
    MONITOR=$M TEXT_FONT=$TF GLYPH_FONT=$GF polybar $BARTWO &
done

# wait till all the bars have launched
for BPID in $( pidof polybar ); do
    until ls /tmp/polybar_mqueue.$BPID >/dev/null 2>&1; do sleep 2; done
done

# get the process ID of all the instances of the second bar
mapfile -t BARTWO_PIDS < <( ps ax | grep "polybar $BARTWO" | grep -v grep | awk '{print $1};' )

# then hide the instances of the second bar, showing only ones of the first bar
for BAR_PID in ${BARTWO_PIDS[@]}; do
    polybar-msg -p "$BAR_PID" cmd hide >/dev/null 2>&1
done

# initialize the state file for the helper script
polybar-helper init
