#!/usr/bin/env bash

usage() {
    cat << EOF
Usage: $(basename "$0") [-h] [-S] [-e] [-s SECTION] [-k KEY] -f FILE

Parse and extract values from an INI file.

Required options:
  -f, --file [FILE]        Path to INI file to parse.

Additional options:
  -s, --section [SECTION]  Filter/select a specific section while parsing.
  -k, --key [KEY]          Filter/select a specific key while parsing.
                           This can be used without -s/--section flag to check within all sections.
  -S, --strict             Enable strict mode on parsing i.e. exit on error encountered.
  -e, --escape             Escape backslashes and single quotes if enabled.
  -h, --help               Print this cruft.
EOF
}

cleanup() {
    shopt -q -u ${SWITCH_SHOPT}
    unset -f check_prefix check_ini_file setoptions cleanup
}

error() {
    echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] ERROR: $*" >&2
}

# options for the script
INI_FILE=""
INI_SECTION=""
INI_KEY=""
STRICT_PARSE="false"
ESCAPE_VALUE="false"

# don't continue if we have no options set at all
if [ $# -eq 0 ]; then
    usage
    exit
fi

# validate options
if command -v getopt &> /dev/null; then
    getopt -T
    if [ $? -eq 4 ]; then
        OPTS=$(getopt -o hf:s:k:Se --long help,file:,section:,key:,strict,escape -n "$(basename "$0")" -- "$@")
        if [ $? -ne 0 ]; then
            error "Failed to parse options."
            exit 1
        fi
    else
        OPTS=$(getopt -o hf:s:k:Se -n "$(basename "$0")" -- "$@")
        if [ $? -ne 0 ]; then
            error "Failed to parse options."
            exit 1
        fi
    fi
else
    error "getopt not installed!"
    exit 1
fi

# parse options
eval set -- "$OPTS"
while true; do
    case "$1" in
        -h | --help)
            usage
            exit
            ;;
        -f | --file)
            INI_FILE="$2"
            shift 2
            ;;
        -s | --section)
            INI_SECTION="$2"
            shift 2
            ;;
        -k | --key)
            INI_KEY="$2"
            shift 2
            ;;
        -S | --strict)
            STRICT_PARSE="true"
            shift
            ;;
        -e | --escape)
            ESCAPE_VALUE="true"
            shift
            ;;
        --)
            shift
            break
            ;;
        *) break ;;
    esac
done

# make sure that we have at least the filename and it's valid, otherwise exit
if [ ! -r "$INI_FILE" ]; then
    error "The file '$INI_FILE' doesn't exist or isn't readable!"
    exit 2
fi

# setup cleanup function to run on exit/interrupt
trap cleanup SIGINT SIGTERM ERR EXIT

# declare variables that store the current section
CURRENT_SECTION=""

# set the input field separator for use with the read command within the parsing loop
IFS=$' \t\n'

# store the input field separator we just set so that we can restore if it gets changed within the loop
IFS_OLD="${IFS}"

# setup shell behavior
SWITCH_SHOPT=""
if ! shopt -q extglob; then
    SWITCH_SHOPT="$SWITCH_SHOPT extglob"
fi
if ! shopt -q nocasematch; then
    SWITCH_SHOPT="$SWITCH_SHOPT nocasematch"
fi
shopt -q -s ${SWITCH_SHOPT}

# main parsing loop
while read -r LINE || [ -n "$LINE" ]; do
    # skip blank lines and comments
    if [ -z "$LINE" ] || [ "${LINE:0:1}" = ";" ] || [ "${LINE:0:1}" = "#" ]; then
        continue
    fi
    # check if the line is the beginning of a section
    if [[ $LINE =~ ^\[[a-zA-Z0-9_]{1,}\]$ ]]; then
        # if so, then set the CURRENT_SECTION variable to the name of the section
        CURRENT_SECTION="${LINE#[}"
        CURRENT_SECTION="${CURRENT_SECTION%]}"
        continue
    fi
    # check if the line isn't a valid key-value pair line
    if ! [[ $LINE =~ ^[a-zA-Z0-9._-]{1,}[[:space:]]*= ]]; then
        if [ "$STRICT_PARSE" = "true" ]; then
            error "Invalid line content encountered: $LINE"
            exit
        fi
        continue
    fi
    # by now, if we haven't exited this iteration, then it means that we have a
    # valid key-value pair; so read the key-value pair
    IFS="="
    read -r CURRENT_KEY CURRENT_VAL <<< "${LINE}"
    IFS="${IFS_OLD}"
    # delete spaces around the equal sign
    CURRENT_KEY="${CURRENT_KEY%%+([[:space:]])}"
    CURRENT_VAL="${CURRENT_VAL##+([[:space:]])}"
    # remove quotes around the value if they are present
    if [[ $CURRENT_VAL =~ ^\".*\"$ ]]; then
        CURRENT_VAL="${CURRENT_VAL##\"}"
        CURRENT_VAL="${CURRENT_VAL%%\"}"
    elif [[ $CURRENT_VAL =~ ^\'.*\'$ ]]; then
        CURRENT_VAL="${CURRENT_VAL##\'}"
        CURRENT_VAL="${CURRENT_VAL%%\'}"
    fi
    if [ "$ESCAPE_VALUE" = "true" ]; then
        CURRENT_VAL="${CURRENT_VAL//\\/\\\\}"
        CURRENT_VAL="\$'${CURRENT_VAL//\'/\'}'"
    fi
    # conditionally print the values based on what options we have set and the
    # current section & key & value
    if [ -n "$INI_SECTION" ]; then
        if [ "$CURRENT_SECTION" != "$INI_SECTION" ]; then
            continue
        else
            if [ -n "$INI_KEY" ]; then
                if [ "$CURRENT_KEY" != "$INI_KEY" ]; then
                    continue
                else
                    echo "$CURRENT_VAL"
                fi
            else
                echo "$CURRENT_KEY=$CURRENT_VAL"
            fi
        fi
    else
        if [ -n "$INI_KEY" ]; then
            if [ "$CURRENT_KEY" != "$INI_KEY" ]; then
                continue
            else
                echo "$CURRENT_VAL"
            fi
        else
            if [ -z "$CURRENT_SECTION" ]; then
                echo "$CURRENT_KEY=$CURRENT_VAL"
            else
                echo "$CURRENT_SECTION/$CURRENT_KEY=$CURRENT_VAL"
            fi
        fi
    fi
done < "$INI_FILE"
