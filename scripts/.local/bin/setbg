#!/usr/bin/env bash

usage() {
    cat << EOF
Usage: $(basename "$0") [-h] [-i IMAGE] [-m MODE] [-c PATH] [-r]

Set a wallpaper given an image file OR restore currently set wallpaper.

Options:
  -i, --image [FILE]     Specify image to be set as wallpaper.
                         If specifying a directory, an image will be picked at random.
                         If not specified, -m/--mode will also be ignored and current wallpaper will be applied.
  -m, --mode [MODE]      Specify the scaling mode to set the wallpaper.
                         Defaults to 'fill'.
  -c, --current [PATH]   Set the path to save the symlink to the currently set wallpaper (for restoring).
                         Defaults to '~/.config/wm/current_wallpaper'.
  -h, --help             Print this cruft.
EOF
}

error() {
    echo "[$( date +'%Y-%m-%dT%H:%M:%S%z' )] ERROR: $*" >&2
}

# list of allowed modes
ALLOWED_MODES=( "fill" "center" "tile" "stretch" "maxaspect" )

# options for the script
CURRENT_BG="${XDG_CONFIG_HOME:=$HOME/.config}/wm/current_wallpaper"
SEL_BG=""
SEL_MODE="fill"

# validate options
if command -v getopt &> /dev/null; then
    getopt -T
    if [ $? -eq 4 ]; then
        OPTS=$( getopt -o hi:m:c: --long help,image:,mode:,current: -n "$( basename "$0" )" -- "$@" )
        if [ $? -ne 0 ]; then
            error "Failed to parse options."
            exit 1
        fi
    else
        OPTS=$( getopt -o hi:m:c: -n "$( basename "$0" )" -- "$@" )
        if [ $? -ne 0 ]; then
            error "Failed to parse options."
            exit 1
        fi
    fi
else
    error "getopt not installed!"
    exit 1
fi

# parse options
eval set -- "$OPTS"
while true; do
    case "$1" in
        -h | --help ) usage; exit;;
        -i | --image ) SEL_BG="$2"; shift 2;;
        -m | --mode ) SEL_MODE="$2"; shift 2;;
        -c | --current ) CURRENT_BG="$2"; shift 2;;
        -- ) shift; break;;
        * ) break;;
    esac
done

# make sure that the current background path is valid and readable, otherwise exit
if [ ! -r "$CURRENT_BG" ]; then
    error "The current background file '$CURRENT_BG' doesn't exist or isn't readable!"
    exit 2
fi

# if selected background path is non-empty - then we have to set the wallpaper
if [ -n "$SEL_BG" ]; then
    # make sure the selected background path is valid and readable
    if [ ! -r "$SEL_BG" ]; then
        error "The selected background file '$SEL_BG' doesn't exist or isn't readable!"
        exit 2
    fi
    # handle direct symlinks with readlink
    if [ -h "$SEL_BG" ]; then
        SEL_BG="$( readlink -n "$SEL_BG" )"
    fi
    # check if the mode is valid or not
    if [[ ! " ${ALLOWED_MODES[@]} " =~ " $SEL_MODE " ]]; then
        error "Invalid mode '$SEL_MODE' specified!"
        exit 3
    fi
    # now create the symlink to the current background path based on the type of selected background path provided
    if [ -f "$SEL_BG" ]; then
        ln -sf "$SEL_BG" "$CURRENT_BG"
        notify-send -u low -i "$CURRENT_BG" "Changing wallpaper to:" "$SEL_BG"
    elif [ -d "$SEL_BG" ]; then
        ln -sf "$( find "$SEL_BG" -iregex '.*.\(jpg\|jpeg\|png\|gif\)' -type f | shuf -n 1 )" "$CURRENT_BG"
        notify-send -u low -i "$CURRENT_BG" "Changing wallpaper at random from:" "$SEL_BG"
    fi
fi

# now apply the wallpaper from the current background path
if command -v xwallpaper &> /dev/null; then
    XWALLPAPER_MODE="$( echo "$SEL_MODE" | sed 's/fill/zoom/g;s/maxaspect/maximize/g' )"
    xwallpaper --$XWALLPAPER_MODE "$CURRENT_BG"
elif command -v feh &> /dev/null; then
    FEH_MODE="bg-$( echo "$SEL_MODE" | sed 's/maxaspect/max/g;s/stretch/scale/g' )"
    feh --no-fehbg --$FEH_MODE "$CURRENT_BG"
elif command -v hsetroot &> /dev/null; then
    HSETROOT_MODE="$( echo "$SEL_MODE" | sed 's/fill/cover/g;s/stretch/fill/g;s/maxaspect/full/g' )"
    hsetroot -$HSETROOT_MODE "$CURRENT_BG"
fi
